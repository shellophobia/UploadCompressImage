{"version":3,"sources":["webpack://transformImageJS/webpack/bootstrap","webpack://transformImageJS/./src/defaults.js","webpack://transformImageJS/./src/constants.js","webpack://transformImageJS/./src/utils.js","webpack://transformImageJS/./src/resizeImage.js","webpack://transformImageJS/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","sizeLimit","maxWidth","maxHeight","quality","outputType","allowedFileTypes","OUTPUT_TYPE","BLOB","BASE64","FILE","validateAndGetBlob","image","options","imgBlob","File","fileToBlob","validateFileSize","size","validateFileType","type","fileType","accepted","forEach","allowedFileType","RegExp","test","file","getBlob","Promise","resolve","_reject","fileReader","FileReader","onload","event","Blob","target","result","readAsArrayBuffer","imageSize","Error","base64ToBlob","base64","regEx","replace","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","charCodeAt","byteArray","Uint8Array","push","base64ToFile","fileName","validateOutputType","values","includes","resizeImageFn","window","URL","webkitURL","blobURL","createObjectURL","Image","src","revokeObjectURL","resizedImage","resizeImageCanvas","output","img","canvas","document","createElement","width","height","Math","round","getContext","drawImage","toDataURL","metadata","originalHeight","originalWidth","resizedHeight","resizedWidth","TransformImage","defaultVal","reject","this"],"mappings":"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","file":"transform-image-js.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default {\n  sizeLimit: 16777216, // 16MB\n  maxWidth: 500,\n  maxHeight: 500,\n  quality: 0.9,\n  outputType: \"blob\",\n  allowedFileTypes: [\"jpg\", \"png\", \"jpeg\"]\n};\n","export const OUTPUT_TYPE = {\n  BLOB: \"blob\",\n  BASE64: \"base64\",\n  FILE: \"file\"\n};\n","import { OUTPUT_TYPE } from \"./constants\";\n\nexport const validateAndGetBlob = async (image, options) => {\n  let imgBlob = image;\n  if (image instanceof File) {\n    imgBlob = await fileToBlob(image);\n  }\n  validateFileSize(imgBlob.size, options);\n  validateFileType(imgBlob.type, options);\n  return imgBlob;\n};\n\nexport const validateFileType = (fileType, options) => {\n  let accepted = false;\n  options.allowedFileTypes.forEach(allowedFileType => {\n    const regEx = new RegExp(\"image/\" + allowedFileType);\n    if (regEx.test(fileType)) accepted = true;\n  });\n  return accepted;\n};\n\nexport const fileToBlob = async file => {\n  const getBlob = () =>\n    new Promise((resolve, _reject) => {\n      const fileReader = new FileReader();\n      fileReader.onload = event => {\n        resolve(new Blob([event.target.result], { type: file.type }));\n      };\n      fileReader.readAsArrayBuffer(file);\n    });\n  return getBlob();\n};\n\nexport const validateFileSize = (imageSize, options) => {\n  if (imageSize > options.sizeLimit) {\n    throw new Error(\n      `Please upload an image of size less than ${options.sizeLimit /\n        (1024 * 1024)}MB`\n    );\n  }\n};\n\nexport const base64ToBlob = (base64, fileType) => {\n  const sliceSize = 512; // uses 512 as packet size for efficient conversion\n  const regEx = new RegExp(\"^data:\" + fileType + \";base64,\");\n  base64 = base64.replace(regEx, \"\");\n  const byteCharacters = atob(base64);\n  const byteArrays = [];\n\n  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n    const byteNumbers = new Array(slice.length);\n    for (let i = 0; i < slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n\n    byteArrays.push(byteArray);\n  }\n\n  const blob = new Blob(byteArrays, { type: fileType });\n  return blob;\n};\n\nexport const base64ToFile = (base64, fileType, fileName) => {\n  const imgBlob = base64ToBlob(base64, fileType);\n  return new File([imgBlob], fileName, { type: fileType });\n};\n\nexport const validateOutputType = type => {\n  if (!Object.values(OUTPUT_TYPE).includes(type)) {\n    throw new Error(`invalid output type ${type}`);\n  }\n};\n","import { base64ToBlob, base64ToFile } from \"./utils\";\nimport { OUTPUT_TYPE } from \"./constants\";\n\n// Returns a promise\nexport const resizeImageFn = async (\n  imgBlob,\n  fileName,\n  options,\n  resolve,\n  _reject\n) => {\n  window.URL = window.URL || window.webkitURL;\n  const blobURL = window.URL.createObjectURL(imgBlob); // and get it's URL\n\n  // helper Image object\n  const image = new Image();\n  image.src = blobURL;\n  image.onload = function() {\n    // have to wait till it's loaded\n    window.URL.revokeObjectURL(blobURL);\n    const resizedImage = resizeImageCanvas(image, imgBlob.type, options); // send it to canvas\n    switch (options.outputType) {\n      case OUTPUT_TYPE.BASE64:\n        resolve(resizedImage);\n        break;\n      case OUTPUT_TYPE.BLOB:\n        resizedImage.output = base64ToBlob(resizedImage.output, imgBlob.type);\n        resolve(resizedImage);\n        break;\n      default:\n        resizedImage.output = base64ToFile(\n          resizedImage.output,\n          imgBlob.type,\n          fileName\n        );\n        resolve(resizedImage);\n        break;\n    }\n  };\n};\n\nexport const resizeImageCanvas = (img, fileType, options) => {\n  const canvas = document.createElement(\"canvas\");\n  let width = img.width;\n  let height = img.height;\n\n  // calculate the width and height, constraining the proportions\n  if (width > height) {\n    if (width > options.maxWidth) {\n      height = Math.round((height *= options.maxWidth / width));\n      width = options.maxWidth;\n    }\n  } else {\n    if (height > options.maxHeight) {\n      width = Math.round((width *= options.maxHeight / height));\n      height = options.maxHeight;\n    }\n  }\n\n  // resize the canvas and draw the image data into it\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(img, 0, 0, width, height);\n\n  return {\n    output: canvas.toDataURL(fileType, options.quality),\n    metadata: {\n      originalHeight: img.height,\n      originalWidth: img.width,\n      resizedHeight: height,\n      resizedWidth: width\n    }\n  };\n};\n","import defaultVal from \"./defaults\";\nimport { resizeImageFn } from \"./resizeImage\";\nimport { validateAndGetBlob, validateOutputType } from \"./utils\";\n\nclass TransformImage {\n  /*\n    Options - An object with following properties\n    sizeLimit : the byte size limit for the input file/blob\n    outputType: defines the output object format. Allowed values :- blob/base64/file\n    allowedFileTypes: allowed types for the input file/blob e.g. PNG, JPEG, JPG\n  */\n  constructor(options = {}) {\n    options.sizeLimit = options.sizeLimit || defaultVal.sizeLimit;\n    options.outputType = options.outputType || defaultVal.outputType; // output object format BLOB/BASE64/FILE\n    validateOutputType(options.outputType);\n    options.allowedFileTypes =\n      options.allowedFileTypes || defaultVal.allowedFileTypes; // An array of allowed file types\n    this.options = options;\n  }\n\n  /*\n  @params\n  image - File object / Blob\n  Options - An object with following properties\n    maxWidth: the max width for the file in px\n    maxHeight: the max height for the file in px\n    quality: a value between 0 and 1 to denote the quality of the output image\n  fileName - Name of the file if input is file (Optional)\n  */\n  resizeImage = async (image, options = {}, fileName = \"\") => {\n    // Perform a null check on image\n    if (!image) return;\n\n    options.maxWidth = options.maxWidth || defaultVal.maxWidth;\n    options.maxHeight = options.maxHeight || defaultVal.maxHeight;\n    options.quality = options.quality || defaultVal.quality; // Quality - A value between 0 and 1 to denote the quality of the image in the output\n\n    const imgBlob = await validateAndGetBlob(image, this.options);\n\n    return new Promise((resolve, reject) => {\n      resizeImageFn(\n        imgBlob,\n        fileName,\n        { ...this.options, options },\n        resolve,\n        reject\n      );\n    });\n  };\n}\n\nexport default TransformImage;\n"],"sourceRoot":""}